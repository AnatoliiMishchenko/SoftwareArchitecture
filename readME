Task one
Урок 1. Введение в понятие архитектуры, проектирование ПО и жизненный цикл программного продукта. UML-диаграммы
Задание 1. На основе Диаграмы классов ModelElements, разработать классы: Model Store, PoligonalModel (Texture, Poligon), Flash, Camera, Scene

Задание 2. Ознакомиться с документацией в свободном формате, которая может пригодиться Вам для дальнейшей работы:

ГОСТ Р ИСО/МЭК 12207-2010 Информационная технология (ИТ). Системная и программная инженерия. Процессы жизненного цикла программных средств.
ISO/IEC/IEEE 29148:2018 Systems and software engineering — Life cycle processes — Requirements engineering
Стандарты ЕСКД — единая система конструкторской документации
ГОСТ 2.001-2013 ЕСКД. Общие положения
Стандарты АСУ ГОСТ 34 — автоматизированные системы управления
Стандарты ЕСПД ГОСТ 19 — единая система программной документации

Урок 2. Объектно-ориентированные паттерны
Задание 1. Закончить разработку паттерна Фабричный метод. Добавить в пример из семинара как минимум 5 наград.
Задание 2. Познакомиться с другими типами паттернов (задание по желанию). Сделать пример кода одного из паттенрнов, можно синглтон.

Урок 3. Принципы SOLID
1) Спроектировать абстрактный класс «Car» у которого должны быть свойства: марка, модель, цвет, тип кузова, число колёс, тип топлива, тип коробки передач, объём двигателя; методы: движение, обслуживание, переключение передач, включение фар, включение дворников.
2) Создать конкретный автомобиль путём наследования класса «Car».
3) Создать интерфейс «Заправочная станция», создать метод: заправка топливом.
4) Имплементировать метод интерфейса «Заправочная станция» в конкретный класс «Car».
5) Создать путём наследования класса «Car» два автомобиля: с бензиновым и дизельным двигателями, имплементировать метод «Заправка топливом» интерфейса «Заправочная станция». Реализовать заправку каждого автомобиля подходящим топливом.

По разработанному коду нарисовать UML диаграмму.
Диаграмму можно нарисовать на ресурсе:https://online.visual-paradigm.com/login.jsp?t=diagrams

Урок 4. Компоненты. Принципы связности и сочетаемости компонентов
Вы принимаете участие в проекте(приложение покупки билета на автобус). Вам доступен проект разработанный вашей командой. Осталась только ваша часть до релиза. Вам предстоит:
1) Разработать по UML диаграмме классы домена приложения: User, Carrier, BankAccount и Ticket
2) Разработать по UML диаграмме классы: TicketProvider и CashProvider
Полностью разработанный проект должен собраться и выполниться. Общая UML диаграмма, проект и UML неразработанных классов приложена в материалах курса.


Урок 5. Горизонтальные уровни и вертикальные срезы архитектуры
Сформировать компоненты для любой системы из задания. Выпустить диаграмму компонент UML(сдача в формате jpg файла на гите)
На выбор:
- UML диаграмма структуры 3D редактора
- UML диаграмма структуры МаркетПлейс(монолит)
- UML диаграмма структуры Приложения контроля работы Пивзавода(смена, бухгалтерия и директор)
(со звездочкой) Сделать реализацию на языке JAVA по разработанной UML диаграмме.

Урок 6. Принципы построения приложений «чистая архитектура»
Разработать полную ERD домена приложения автоматизации работы поликлиники( в https://www.dbdesigner.net/).
Разработать UseCase диаграмму пациента и доктора в приложении автоматизации работы поликлиники.

(Задание со *) Скопировать себе в репозиторий шестигранную архитектуру и прокомментировать код(разобраться в нем).

Решение сдается в всиде jpg файла залитого на GitHub.


